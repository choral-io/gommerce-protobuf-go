// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gommerce/iam/v1beta/events.proto

package iam_v1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserCreatedEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserCreatedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreatedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreatedEventMultiError, or nil if none found.
func (m *UserCreatedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreatedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Realm

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserCreatedEventMultiError(errors)
	}

	return nil
}

// UserCreatedEventMultiError is an error wrapping multiple validation errors
// returned by UserCreatedEvent.ValidateAll() if the designated constraints
// aren't met.
type UserCreatedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreatedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreatedEventMultiError) AllErrors() []error { return m }

// UserCreatedEventValidationError is the validation error returned by
// UserCreatedEvent.Validate if the designated constraints aren't met.
type UserCreatedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreatedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreatedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreatedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreatedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreatedEventValidationError) ErrorName() string { return "UserCreatedEventValidationError" }

// Error satisfies the builtin error interface
func (e UserCreatedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreatedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreatedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreatedEventValidationError{}

// Validate checks the field values on UserUpdatedEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserUpdatedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdatedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserUpdatedEventMultiError, or nil if none found.
func (m *UserUpdatedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdatedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Realm

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserUpdatedEventMultiError(errors)
	}

	return nil
}

// UserUpdatedEventMultiError is an error wrapping multiple validation errors
// returned by UserUpdatedEvent.ValidateAll() if the designated constraints
// aren't met.
type UserUpdatedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdatedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdatedEventMultiError) AllErrors() []error { return m }

// UserUpdatedEventValidationError is the validation error returned by
// UserUpdatedEvent.Validate if the designated constraints aren't met.
type UserUpdatedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdatedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdatedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdatedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdatedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdatedEventValidationError) ErrorName() string { return "UserUpdatedEventValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdatedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdatedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdatedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdatedEventValidationError{}

// Validate checks the field values on UserActivatedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserActivatedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserActivatedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserActivatedEventMultiError, or nil if none found.
func (m *UserActivatedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserActivatedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Realm

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserActivatedEventMultiError(errors)
	}

	return nil
}

// UserActivatedEventMultiError is an error wrapping multiple validation errors
// returned by UserActivatedEvent.ValidateAll() if the designated constraints
// aren't met.
type UserActivatedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserActivatedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserActivatedEventMultiError) AllErrors() []error { return m }

// UserActivatedEventValidationError is the validation error returned by
// UserActivatedEvent.Validate if the designated constraints aren't met.
type UserActivatedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserActivatedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserActivatedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserActivatedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserActivatedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserActivatedEventValidationError) ErrorName() string {
	return "UserActivatedEventValidationError"
}

// Error satisfies the builtin error interface
func (e UserActivatedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserActivatedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserActivatedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserActivatedEventValidationError{}

// Validate checks the field values on UserLoggedInEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserLoggedInEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoggedInEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoggedInEventMultiError, or nil if none found.
func (m *UserLoggedInEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoggedInEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Realm

	// no validation rules for UserId

	// no validation rules for Provider

	// no validation rules for Identifier

	if len(errors) > 0 {
		return UserLoggedInEventMultiError(errors)
	}

	return nil
}

// UserLoggedInEventMultiError is an error wrapping multiple validation errors
// returned by UserLoggedInEvent.ValidateAll() if the designated constraints
// aren't met.
type UserLoggedInEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoggedInEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoggedInEventMultiError) AllErrors() []error { return m }

// UserLoggedInEventValidationError is the validation error returned by
// UserLoggedInEvent.Validate if the designated constraints aren't met.
type UserLoggedInEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoggedInEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoggedInEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoggedInEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoggedInEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoggedInEventValidationError) ErrorName() string {
	return "UserLoggedInEventValidationError"
}

// Error satisfies the builtin error interface
func (e UserLoggedInEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoggedInEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoggedInEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoggedInEventValidationError{}
