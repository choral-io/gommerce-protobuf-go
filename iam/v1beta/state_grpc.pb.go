// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gommerce/iam/v1beta/state.proto

package iam_v1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserStateService_GetState_FullMethodName = "/gommerce.iam.v1beta.UserStateService/GetState"
	UserStateService_SetState_FullMethodName = "/gommerce.iam.v1beta.UserStateService/SetState"
)

// UserStateServiceClient is the client API for UserStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStateServiceClient interface {
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
}

type userStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStateServiceClient(cc grpc.ClientConnInterface) UserStateServiceClient {
	return &userStateServiceClient{cc}
}

func (c *userStateServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, UserStateService_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStateServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, UserStateService_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserStateServiceServer is the server API for UserStateService service.
// All implementations must embed UnimplementedUserStateServiceServer
// for forward compatibility
type UserStateServiceServer interface {
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	mustEmbedUnimplementedUserStateServiceServer()
}

// UnimplementedUserStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStateServiceServer struct {
}

func (UnimplementedUserStateServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedUserStateServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedUserStateServiceServer) mustEmbedUnimplementedUserStateServiceServer() {}

// UnsafeUserStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStateServiceServer will
// result in compilation errors.
type UnsafeUserStateServiceServer interface {
	mustEmbedUnimplementedUserStateServiceServer()
}

func RegisterUserStateServiceServer(s grpc.ServiceRegistrar, srv UserStateServiceServer) {
	s.RegisterService(&UserStateService_ServiceDesc, srv)
}

func _UserStateService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStateServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStateService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStateServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserStateService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserStateServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserStateService_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserStateServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserStateService_ServiceDesc is the grpc.ServiceDesc for UserStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gommerce.iam.v1beta.UserStateService",
	HandlerType: (*UserStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _UserStateService_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _UserStateService_SetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gommerce/iam/v1beta/state.proto",
}
