// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gommerce/iam/v1beta/devices.proto

package iam_v1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DevicesService_PatchDevice_FullMethodName = "/gommerce.iam.v1beta.DevicesService/PatchDevice"
)

// DevicesServiceClient is the client API for DevicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesServiceClient interface {
	PatchDevice(ctx context.Context, in *PatchDeviceRequest, opts ...grpc.CallOption) (*PatchDeviceResponse, error)
}

type devicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesServiceClient(cc grpc.ClientConnInterface) DevicesServiceClient {
	return &devicesServiceClient{cc}
}

func (c *devicesServiceClient) PatchDevice(ctx context.Context, in *PatchDeviceRequest, opts ...grpc.CallOption) (*PatchDeviceResponse, error) {
	out := new(PatchDeviceResponse)
	err := c.cc.Invoke(ctx, DevicesService_PatchDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServiceServer is the server API for DevicesService service.
// All implementations must embed UnimplementedDevicesServiceServer
// for forward compatibility
type DevicesServiceServer interface {
	PatchDevice(context.Context, *PatchDeviceRequest) (*PatchDeviceResponse, error)
	mustEmbedUnimplementedDevicesServiceServer()
}

// UnimplementedDevicesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServiceServer struct {
}

func (UnimplementedDevicesServiceServer) PatchDevice(context.Context, *PatchDeviceRequest) (*PatchDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDevice not implemented")
}
func (UnimplementedDevicesServiceServer) mustEmbedUnimplementedDevicesServiceServer() {}

// UnsafeDevicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServiceServer will
// result in compilation errors.
type UnsafeDevicesServiceServer interface {
	mustEmbedUnimplementedDevicesServiceServer()
}

func RegisterDevicesServiceServer(s grpc.ServiceRegistrar, srv DevicesServiceServer) {
	s.RegisterService(&DevicesService_ServiceDesc, srv)
}

func _DevicesService_PatchDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServiceServer).PatchDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DevicesService_PatchDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServiceServer).PatchDevice(ctx, req.(*PatchDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevicesService_ServiceDesc is the grpc.ServiceDesc for DevicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gommerce.iam.v1beta.DevicesService",
	HandlerType: (*DevicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PatchDevice",
			Handler:    _DevicesService_PatchDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gommerce/iam/v1beta/devices.proto",
}
