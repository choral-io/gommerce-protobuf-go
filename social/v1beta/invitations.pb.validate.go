// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gommerce/social/v1beta/invitations.proto

package social_v1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Invitation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Invitation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Invitation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InvitationMultiError, or
// nil if none found.
func (m *Invitation) ValidateAll() error {
	return m.validate(true)
}

func (m *Invitation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InviterId

	// no validation rules for InviteeId

	if all {
		switch v := interface{}(m.GetChannelId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "ChannelId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "ChannelId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvitationValidationError{
				field:  "ChannelId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvitationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvitationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InvitationMultiError(errors)
	}

	return nil
}

// InvitationMultiError is an error wrapping multiple validation errors
// returned by Invitation.ValidateAll() if the designated constraints aren't met.
type InvitationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvitationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvitationMultiError) AllErrors() []error { return m }

// InvitationValidationError is the validation error returned by
// Invitation.Validate if the designated constraints aren't met.
type InvitationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvitationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvitationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvitationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvitationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvitationValidationError) ErrorName() string { return "InvitationValidationError" }

// Error satisfies the builtin error interface
func (e InvitationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvitation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvitationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvitationValidationError{}

// Validate checks the field values on CreateInvitationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInvitationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInvitationRequestMultiError, or nil if none found.
func (m *CreateInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InviterId

	// no validation rules for InviteeId

	if all {
		switch v := interface{}(m.GetChannelId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInvitationRequestValidationError{
					field:  "ChannelId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInvitationRequestValidationError{
					field:  "ChannelId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInvitationRequestValidationError{
				field:  "ChannelId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInvitationRequestMultiError(errors)
	}

	return nil
}

// CreateInvitationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInvitationRequestMultiError) AllErrors() []error { return m }

// CreateInvitationRequestValidationError is the validation error returned by
// CreateInvitationRequest.Validate if the designated constraints aren't met.
type CreateInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInvitationRequestValidationError) ErrorName() string {
	return "CreateInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInvitationRequestValidationError{}

// Validate checks the field values on CreateInvitationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInvitationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInvitationResponseMultiError, or nil if none found.
func (m *CreateInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateInvitationResponseMultiError(errors)
	}

	return nil
}

// CreateInvitationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInvitationResponseMultiError) AllErrors() []error { return m }

// CreateInvitationResponseValidationError is the validation error returned by
// CreateInvitationResponse.Validate if the designated constraints aren't met.
type CreateInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInvitationResponseValidationError) ErrorName() string {
	return "CreateInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInvitationResponseValidationError{}

// Validate checks the field values on ListInvitationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvitationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvitationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvitationsRequestMultiError, or nil if none found.
func (m *ListInvitationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvitationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Sort

	if len(errors) > 0 {
		return ListInvitationsRequestMultiError(errors)
	}

	return nil
}

// ListInvitationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListInvitationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInvitationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvitationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvitationsRequestMultiError) AllErrors() []error { return m }

// ListInvitationsRequestValidationError is the validation error returned by
// ListInvitationsRequest.Validate if the designated constraints aren't met.
type ListInvitationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvitationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvitationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvitationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvitationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvitationsRequestValidationError) ErrorName() string {
	return "ListInvitationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvitationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvitationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvitationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvitationsRequestValidationError{}

// Validate checks the field values on ListInvitationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvitationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvitationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvitationsResponseMultiError, or nil if none found.
func (m *ListInvitationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvitationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInvitationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInvitationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInvitationsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Total

	if len(errors) > 0 {
		return ListInvitationsResponseMultiError(errors)
	}

	return nil
}

// ListInvitationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListInvitationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInvitationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvitationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvitationsResponseMultiError) AllErrors() []error { return m }

// ListInvitationsResponseValidationError is the validation error returned by
// ListInvitationsResponse.Validate if the designated constraints aren't met.
type ListInvitationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvitationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvitationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvitationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvitationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvitationsResponseValidationError) ErrorName() string {
	return "ListInvitationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvitationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvitationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvitationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvitationsResponseValidationError{}
