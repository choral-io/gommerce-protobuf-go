// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gommerce/state/v1beta/store.proto

package state_v1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateStoreService_GetState_FullMethodName = "/gommerce.state.v1beta.StateStoreService/GetState"
	StateStoreService_SetState_FullMethodName = "/gommerce.state.v1beta.StateStoreService/SetState"
	StateStoreService_DelState_FullMethodName = "/gommerce.state.v1beta.StateStoreService/DelState"
)

// StateStoreServiceClient is the client API for StateStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateStoreServiceClient interface {
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	DelState(ctx context.Context, in *DelStateRequest, opts ...grpc.CallOption) (*DelStateResponse, error)
}

type stateStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateStoreServiceClient(cc grpc.ClientConnInterface) StateStoreServiceClient {
	return &stateStoreServiceClient{cc}
}

func (c *stateStoreServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, StateStoreService_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateStoreServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, StateStoreService_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateStoreServiceClient) DelState(ctx context.Context, in *DelStateRequest, opts ...grpc.CallOption) (*DelStateResponse, error) {
	out := new(DelStateResponse)
	err := c.cc.Invoke(ctx, StateStoreService_DelState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateStoreServiceServer is the server API for StateStoreService service.
// All implementations must embed UnimplementedStateStoreServiceServer
// for forward compatibility
type StateStoreServiceServer interface {
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	DelState(context.Context, *DelStateRequest) (*DelStateResponse, error)
	mustEmbedUnimplementedStateStoreServiceServer()
}

// UnimplementedStateStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStateStoreServiceServer struct {
}

func (UnimplementedStateStoreServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStateStoreServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedStateStoreServiceServer) DelState(context.Context, *DelStateRequest) (*DelStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelState not implemented")
}
func (UnimplementedStateStoreServiceServer) mustEmbedUnimplementedStateStoreServiceServer() {}

// UnsafeStateStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateStoreServiceServer will
// result in compilation errors.
type UnsafeStateStoreServiceServer interface {
	mustEmbedUnimplementedStateStoreServiceServer()
}

func RegisterStateStoreServiceServer(s grpc.ServiceRegistrar, srv StateStoreServiceServer) {
	s.RegisterService(&StateStoreService_ServiceDesc, srv)
}

func _StateStoreService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateStoreServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateStoreService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateStoreServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateStoreService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateStoreServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateStoreService_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateStoreServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StateStoreService_DelState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateStoreServiceServer).DelState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateStoreService_DelState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateStoreServiceServer).DelState(ctx, req.(*DelStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateStoreService_ServiceDesc is the grpc.ServiceDesc for StateStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gommerce.state.v1beta.StateStoreService",
	HandlerType: (*StateStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _StateStoreService_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _StateStoreService_SetState_Handler,
		},
		{
			MethodName: "DelState",
			Handler:    _StateStoreService_DelState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gommerce/state/v1beta/store.proto",
}
