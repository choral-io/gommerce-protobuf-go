// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gommerce/state/v1beta/store.proto

package state_v1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetStateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStateRequestMultiError, or nil if none found.
func (m *GetStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := GetStateRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return GetStateRequestMultiError(errors)
	}

	return nil
}

// GetStateRequestMultiError is an error wrapping multiple validation errors
// returned by GetStateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStateRequestMultiError) AllErrors() []error { return m }

// GetStateRequestValidationError is the validation error returned by
// GetStateRequest.Validate if the designated constraints aren't met.
type GetStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStateRequestValidationError) ErrorName() string { return "GetStateRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStateRequestValidationError{}

// Validate checks the field values on GetStateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStateResponseMultiError, or nil if none found.
func (m *GetStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for Metadata

	// no validation rules for ContentType

	if len(errors) > 0 {
		return GetStateResponseMultiError(errors)
	}

	return nil
}

// GetStateResponseMultiError is an error wrapping multiple validation errors
// returned by GetStateResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStateResponseMultiError) AllErrors() []error { return m }

// GetStateResponseValidationError is the validation error returned by
// GetStateResponse.Validate if the designated constraints aren't met.
type GetStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStateResponseValidationError) ErrorName() string { return "GetStateResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStateResponseValidationError{}

// Validate checks the field values on SetStateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStateRequestMultiError, or nil if none found.
func (m *SetStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := SetStateRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Data

	// no validation rules for Metadata

	// no validation rules for ContentType

	if len(errors) > 0 {
		return SetStateRequestMultiError(errors)
	}

	return nil
}

// SetStateRequestMultiError is an error wrapping multiple validation errors
// returned by SetStateRequest.ValidateAll() if the designated constraints
// aren't met.
type SetStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStateRequestMultiError) AllErrors() []error { return m }

// SetStateRequestValidationError is the validation error returned by
// SetStateRequest.Validate if the designated constraints aren't met.
type SetStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStateRequestValidationError) ErrorName() string { return "SetStateRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStateRequestValidationError{}

// Validate checks the field values on SetStateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetStateResponseMultiError, or nil if none found.
func (m *SetStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetStateResponseMultiError(errors)
	}

	return nil
}

// SetStateResponseMultiError is an error wrapping multiple validation errors
// returned by SetStateResponse.ValidateAll() if the designated constraints
// aren't met.
type SetStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetStateResponseMultiError) AllErrors() []error { return m }

// SetStateResponseValidationError is the validation error returned by
// SetStateResponse.Validate if the designated constraints aren't met.
type SetStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetStateResponseValidationError) ErrorName() string { return "SetStateResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetStateResponseValidationError{}

// Validate checks the field values on DelStateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelStateRequestMultiError, or nil if none found.
func (m *DelStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := DelStateRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return DelStateRequestMultiError(errors)
	}

	return nil
}

// DelStateRequestMultiError is an error wrapping multiple validation errors
// returned by DelStateRequest.ValidateAll() if the designated constraints
// aren't met.
type DelStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelStateRequestMultiError) AllErrors() []error { return m }

// DelStateRequestValidationError is the validation error returned by
// DelStateRequest.Validate if the designated constraints aren't met.
type DelStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelStateRequestValidationError) ErrorName() string { return "DelStateRequestValidationError" }

// Error satisfies the builtin error interface
func (e DelStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelStateRequestValidationError{}

// Validate checks the field values on DelStateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelStateResponseMultiError, or nil if none found.
func (m *DelStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DelStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelStateResponseMultiError(errors)
	}

	return nil
}

// DelStateResponseMultiError is an error wrapping multiple validation errors
// returned by DelStateResponse.ValidateAll() if the designated constraints
// aren't met.
type DelStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelStateResponseMultiError) AllErrors() []error { return m }

// DelStateResponseValidationError is the validation error returned by
// DelStateResponse.Validate if the designated constraints aren't met.
type DelStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelStateResponseValidationError) ErrorName() string { return "DelStateResponseValidationError" }

// Error satisfies the builtin error interface
func (e DelStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelStateResponseValidationError{}
