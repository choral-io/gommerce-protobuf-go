// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gommerce/utils/v1/utils.proto

package utils_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NextValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextValueRequestMultiError, or nil if none found.
func (m *NextValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NextValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := NextValueRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinValue() < 0 {
		err := NextValueRequestValidationError{
			field:  "MinValue",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxValue() < 0 {
		err := NextValueRequestValidationError{
			field:  "MaxValue",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NextValueRequestMultiError(errors)
	}

	return nil
}

// NextValueRequestMultiError is an error wrapping multiple validation errors
// returned by NextValueRequest.ValidateAll() if the designated constraints
// aren't met.
type NextValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextValueRequestMultiError) AllErrors() []error { return m }

// NextValueRequestValidationError is the validation error returned by
// NextValueRequest.Validate if the designated constraints aren't met.
type NextValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextValueRequestValidationError) ErrorName() string { return "NextValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e NextValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextValueRequestValidationError{}

// Validate checks the field values on NextValueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextValueResponseMultiError, or nil if none found.
func (m *NextValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NextValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return NextValueResponseMultiError(errors)
	}

	return nil
}

// NextValueResponseMultiError is an error wrapping multiple validation errors
// returned by NextValueResponse.ValidateAll() if the designated constraints
// aren't met.
type NextValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextValueResponseMultiError) AllErrors() []error { return m }

// NextValueResponseValidationError is the validation error returned by
// NextValueResponse.Validate if the designated constraints aren't met.
type NextValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextValueResponseValidationError) ErrorName() string {
	return "NextValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NextValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextValueResponseValidationError{}

// Validate checks the field values on NextHexRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NextHexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextHexRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NextHexRequestMultiError,
// or nil if none found.
func (m *NextHexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NextHexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NextHexRequestMultiError(errors)
	}

	return nil
}

// NextHexRequestMultiError is an error wrapping multiple validation errors
// returned by NextHexRequest.ValidateAll() if the designated constraints
// aren't met.
type NextHexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextHexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextHexRequestMultiError) AllErrors() []error { return m }

// NextHexRequestValidationError is the validation error returned by
// NextHexRequest.Validate if the designated constraints aren't met.
type NextHexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextHexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextHexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextHexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextHexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextHexRequestValidationError) ErrorName() string { return "NextHexRequestValidationError" }

// Error satisfies the builtin error interface
func (e NextHexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextHexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextHexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextHexRequestValidationError{}

// Validate checks the field values on NextHexResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextHexResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextHexResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextHexResponseMultiError, or nil if none found.
func (m *NextHexResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NextHexResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return NextHexResponseMultiError(errors)
	}

	return nil
}

// NextHexResponseMultiError is an error wrapping multiple validation errors
// returned by NextHexResponse.ValidateAll() if the designated constraints
// aren't met.
type NextHexResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextHexResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextHexResponseMultiError) AllErrors() []error { return m }

// NextHexResponseValidationError is the validation error returned by
// NextHexResponse.Validate if the designated constraints aren't met.
type NextHexResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextHexResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextHexResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextHexResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextHexResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextHexResponseValidationError) ErrorName() string { return "NextHexResponseValidationError" }

// Error satisfies the builtin error interface
func (e NextHexResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextHexResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextHexResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextHexResponseValidationError{}

// Validate checks the field values on NextInt64Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextInt64Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextInt64Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextInt64RequestMultiError, or nil if none found.
func (m *NextInt64Request) ValidateAll() error {
	return m.validate(true)
}

func (m *NextInt64Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NextInt64RequestMultiError(errors)
	}

	return nil
}

// NextInt64RequestMultiError is an error wrapping multiple validation errors
// returned by NextInt64Request.ValidateAll() if the designated constraints
// aren't met.
type NextInt64RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextInt64RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextInt64RequestMultiError) AllErrors() []error { return m }

// NextInt64RequestValidationError is the validation error returned by
// NextInt64Request.Validate if the designated constraints aren't met.
type NextInt64RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextInt64RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextInt64RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextInt64RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextInt64RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextInt64RequestValidationError) ErrorName() string { return "NextInt64RequestValidationError" }

// Error satisfies the builtin error interface
func (e NextInt64RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextInt64Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextInt64RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextInt64RequestValidationError{}

// Validate checks the field values on NextInt64Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextInt64Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextInt64Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextInt64ResponseMultiError, or nil if none found.
func (m *NextInt64Response) ValidateAll() error {
	return m.validate(true)
}

func (m *NextInt64Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return NextInt64ResponseMultiError(errors)
	}

	return nil
}

// NextInt64ResponseMultiError is an error wrapping multiple validation errors
// returned by NextInt64Response.ValidateAll() if the designated constraints
// aren't met.
type NextInt64ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextInt64ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextInt64ResponseMultiError) AllErrors() []error { return m }

// NextInt64ResponseValidationError is the validation error returned by
// NextInt64Response.Validate if the designated constraints aren't met.
type NextInt64ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextInt64ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextInt64ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextInt64ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextInt64ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextInt64ResponseValidationError) ErrorName() string {
	return "NextInt64ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NextInt64ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextInt64Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextInt64ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextInt64ResponseValidationError{}

// Validate checks the field values on GeneratePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GeneratePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeneratePasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GeneratePasswordRequestMultiError, or nil if none found.
func (m *GeneratePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GeneratePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLength() <= 0 {
		err := GeneratePasswordRequestValidationError{
			field:  "Length",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSymbols()) < 1 {
		err := GeneratePasswordRequestValidationError{
			field:  "Symbols",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GeneratePasswordRequestMultiError(errors)
	}

	return nil
}

// GeneratePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by GeneratePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type GeneratePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeneratePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeneratePasswordRequestMultiError) AllErrors() []error { return m }

// GeneratePasswordRequestValidationError is the validation error returned by
// GeneratePasswordRequest.Validate if the designated constraints aren't met.
type GeneratePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneratePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneratePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneratePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneratePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneratePasswordRequestValidationError) ErrorName() string {
	return "GeneratePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GeneratePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneratePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneratePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneratePasswordRequestValidationError{}

// Validate checks the field values on GeneratePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GeneratePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeneratePasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GeneratePasswordResponseMultiError, or nil if none found.
func (m *GeneratePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GeneratePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GeneratePasswordResponseMultiError(errors)
	}

	return nil
}

// GeneratePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by GeneratePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type GeneratePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeneratePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeneratePasswordResponseMultiError) AllErrors() []error { return m }

// GeneratePasswordResponseValidationError is the validation error returned by
// GeneratePasswordResponse.Validate if the designated constraints aren't met.
type GeneratePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneratePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneratePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneratePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneratePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneratePasswordResponseValidationError) ErrorName() string {
	return "GeneratePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GeneratePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneratePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneratePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneratePasswordResponseValidationError{}

// Validate checks the field values on HashPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HashPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HashPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HashPasswordRequestMultiError, or nil if none found.
func (m *HashPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HashPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := HashPasswordRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HashPasswordRequestMultiError(errors)
	}

	return nil
}

// HashPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by HashPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type HashPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HashPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HashPasswordRequestMultiError) AllErrors() []error { return m }

// HashPasswordRequestValidationError is the validation error returned by
// HashPasswordRequest.Validate if the designated constraints aren't met.
type HashPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashPasswordRequestValidationError) ErrorName() string {
	return "HashPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HashPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHashPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashPasswordRequestValidationError{}

// Validate checks the field values on HashPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HashPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HashPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HashPasswordResponseMultiError, or nil if none found.
func (m *HashPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HashPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return HashPasswordResponseMultiError(errors)
	}

	return nil
}

// HashPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by HashPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type HashPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HashPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HashPasswordResponseMultiError) AllErrors() []error { return m }

// HashPasswordResponseValidationError is the validation error returned by
// HashPasswordResponse.Validate if the designated constraints aren't met.
type HashPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashPasswordResponseValidationError) ErrorName() string {
	return "HashPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HashPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHashPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashPasswordResponseValidationError{}

// Validate checks the field values on ValidatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidatePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidatePasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidatePasswordRequestMultiError, or nil if none found.
func (m *ValidatePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidatePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetHashedPassword()) < 1 {
		err := ValidatePasswordRequestValidationError{
			field:  "HashedPassword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProvidedPassword()) < 1 {
		err := ValidatePasswordRequestValidationError{
			field:  "ProvidedPassword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ValidatePasswordRequestMultiError(errors)
	}

	return nil
}

// ValidatePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ValidatePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidatePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidatePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidatePasswordRequestMultiError) AllErrors() []error { return m }

// ValidatePasswordRequestValidationError is the validation error returned by
// ValidatePasswordRequest.Validate if the designated constraints aren't met.
type ValidatePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidatePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidatePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidatePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidatePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidatePasswordRequestValidationError) ErrorName() string {
	return "ValidatePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidatePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidatePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidatePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidatePasswordRequestValidationError{}

// Validate checks the field values on ValidatePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidatePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidatePasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidatePasswordResponseMultiError, or nil if none found.
func (m *ValidatePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidatePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return ValidatePasswordResponseMultiError(errors)
	}

	return nil
}

// ValidatePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ValidatePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidatePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidatePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidatePasswordResponseMultiError) AllErrors() []error { return m }

// ValidatePasswordResponseValidationError is the validation error returned by
// ValidatePasswordResponse.Validate if the designated constraints aren't met.
type ValidatePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidatePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidatePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidatePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidatePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidatePasswordResponseValidationError) ErrorName() string {
	return "ValidatePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidatePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidatePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidatePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidatePasswordResponseValidationError{}

// Validate checks the field values on GetDBNowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDBNowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDBNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDBNowRequestMultiError, or nil if none found.
func (m *GetDBNowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDBNowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDBNowRequestMultiError(errors)
	}

	return nil
}

// GetDBNowRequestMultiError is an error wrapping multiple validation errors
// returned by GetDBNowRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDBNowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDBNowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDBNowRequestMultiError) AllErrors() []error { return m }

// GetDBNowRequestValidationError is the validation error returned by
// GetDBNowRequest.Validate if the designated constraints aren't met.
type GetDBNowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDBNowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDBNowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDBNowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDBNowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDBNowRequestValidationError) ErrorName() string { return "GetDBNowRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDBNowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDBNowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDBNowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDBNowRequestValidationError{}

// Validate checks the field values on GetDBNowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDBNowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDBNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDBNowResponseMultiError, or nil if none found.
func (m *GetDBNowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDBNowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDBNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDBNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDBNowResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDBNowResponseMultiError(errors)
	}

	return nil
}

// GetDBNowResponseMultiError is an error wrapping multiple validation errors
// returned by GetDBNowResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDBNowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDBNowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDBNowResponseMultiError) AllErrors() []error { return m }

// GetDBNowResponseValidationError is the validation error returned by
// GetDBNowResponse.Validate if the designated constraints aren't met.
type GetDBNowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDBNowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDBNowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDBNowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDBNowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDBNowResponseValidationError) ErrorName() string { return "GetDBNowResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetDBNowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDBNowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDBNowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDBNowResponseValidationError{}

// Validate checks the field values on GetRedisNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRedisNowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRedisNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRedisNowRequestMultiError, or nil if none found.
func (m *GetRedisNowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRedisNowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRedisNowRequestMultiError(errors)
	}

	return nil
}

// GetRedisNowRequestMultiError is an error wrapping multiple validation errors
// returned by GetRedisNowRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRedisNowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRedisNowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRedisNowRequestMultiError) AllErrors() []error { return m }

// GetRedisNowRequestValidationError is the validation error returned by
// GetRedisNowRequest.Validate if the designated constraints aren't met.
type GetRedisNowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRedisNowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRedisNowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRedisNowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRedisNowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRedisNowRequestValidationError) ErrorName() string {
	return "GetRedisNowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRedisNowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRedisNowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRedisNowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRedisNowRequestValidationError{}

// Validate checks the field values on GetRedisNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRedisNowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRedisNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRedisNowResponseMultiError, or nil if none found.
func (m *GetRedisNowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRedisNowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRedisNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRedisNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRedisNowResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRedisNowResponseMultiError(errors)
	}

	return nil
}

// GetRedisNowResponseMultiError is an error wrapping multiple validation
// errors returned by GetRedisNowResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRedisNowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRedisNowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRedisNowResponseMultiError) AllErrors() []error { return m }

// GetRedisNowResponseValidationError is the validation error returned by
// GetRedisNowResponse.Validate if the designated constraints aren't met.
type GetRedisNowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRedisNowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRedisNowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRedisNowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRedisNowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRedisNowResponseValidationError) ErrorName() string {
	return "GetRedisNowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRedisNowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRedisNowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRedisNowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRedisNowResponseValidationError{}

// Validate checks the field values on GetUTCNowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUTCNowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUTCNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUTCNowRequestMultiError, or nil if none found.
func (m *GetUTCNowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUTCNowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUTCNowRequestMultiError(errors)
	}

	return nil
}

// GetUTCNowRequestMultiError is an error wrapping multiple validation errors
// returned by GetUTCNowRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUTCNowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUTCNowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUTCNowRequestMultiError) AllErrors() []error { return m }

// GetUTCNowRequestValidationError is the validation error returned by
// GetUTCNowRequest.Validate if the designated constraints aren't met.
type GetUTCNowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUTCNowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUTCNowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUTCNowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUTCNowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUTCNowRequestValidationError) ErrorName() string { return "GetUTCNowRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUTCNowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUTCNowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUTCNowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUTCNowRequestValidationError{}

// Validate checks the field values on GetUTCNowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUTCNowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUTCNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUTCNowResponseMultiError, or nil if none found.
func (m *GetUTCNowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUTCNowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUTCNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUTCNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUTCNowResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUTCNowResponseMultiError(errors)
	}

	return nil
}

// GetUTCNowResponseMultiError is an error wrapping multiple validation errors
// returned by GetUTCNowResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUTCNowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUTCNowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUTCNowResponseMultiError) AllErrors() []error { return m }

// GetUTCNowResponseValidationError is the validation error returned by
// GetUTCNowResponse.Validate if the designated constraints aren't met.
type GetUTCNowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUTCNowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUTCNowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUTCNowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUTCNowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUTCNowResponseValidationError) ErrorName() string {
	return "GetUTCNowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUTCNowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUTCNowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUTCNowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUTCNowResponseValidationError{}

// Validate checks the field values on GetLocalNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocalNowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocalNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocalNowRequestMultiError, or nil if none found.
func (m *GetLocalNowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocalNowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLocalNowRequestMultiError(errors)
	}

	return nil
}

// GetLocalNowRequestMultiError is an error wrapping multiple validation errors
// returned by GetLocalNowRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLocalNowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocalNowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocalNowRequestMultiError) AllErrors() []error { return m }

// GetLocalNowRequestValidationError is the validation error returned by
// GetLocalNowRequest.Validate if the designated constraints aren't met.
type GetLocalNowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocalNowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocalNowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocalNowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocalNowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocalNowRequestValidationError) ErrorName() string {
	return "GetLocalNowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocalNowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocalNowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocalNowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocalNowRequestValidationError{}

// Validate checks the field values on GetLocalNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocalNowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocalNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocalNowResponseMultiError, or nil if none found.
func (m *GetLocalNowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocalNowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLocalNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLocalNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLocalNowResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLocalNowResponseMultiError(errors)
	}

	return nil
}

// GetLocalNowResponseMultiError is an error wrapping multiple validation
// errors returned by GetLocalNowResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLocalNowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocalNowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocalNowResponseMultiError) AllErrors() []error { return m }

// GetLocalNowResponseValidationError is the validation error returned by
// GetLocalNowResponse.Validate if the designated constraints aren't met.
type GetLocalNowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocalNowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocalNowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocalNowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocalNowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocalNowResponseValidationError) ErrorName() string {
	return "GetLocalNowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocalNowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocalNowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocalNowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocalNowResponseValidationError{}

// Validate checks the field values on WatchLocalNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchLocalNowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchLocalNowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchLocalNowRequestMultiError, or nil if none found.
func (m *WatchLocalNowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchLocalNowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WatchLocalNowRequestMultiError(errors)
	}

	return nil
}

// WatchLocalNowRequestMultiError is an error wrapping multiple validation
// errors returned by WatchLocalNowRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchLocalNowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchLocalNowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchLocalNowRequestMultiError) AllErrors() []error { return m }

// WatchLocalNowRequestValidationError is the validation error returned by
// WatchLocalNowRequest.Validate if the designated constraints aren't met.
type WatchLocalNowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchLocalNowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchLocalNowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchLocalNowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchLocalNowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchLocalNowRequestValidationError) ErrorName() string {
	return "WatchLocalNowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchLocalNowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchLocalNowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchLocalNowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchLocalNowRequestValidationError{}

// Validate checks the field values on WatchLocalNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchLocalNowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchLocalNowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchLocalNowResponseMultiError, or nil if none found.
func (m *WatchLocalNowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchLocalNowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchLocalNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchLocalNowResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchLocalNowResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchLocalNowResponseMultiError(errors)
	}

	return nil
}

// WatchLocalNowResponseMultiError is an error wrapping multiple validation
// errors returned by WatchLocalNowResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchLocalNowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchLocalNowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchLocalNowResponseMultiError) AllErrors() []error { return m }

// WatchLocalNowResponseValidationError is the validation error returned by
// WatchLocalNowResponse.Validate if the designated constraints aren't met.
type WatchLocalNowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchLocalNowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchLocalNowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchLocalNowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchLocalNowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchLocalNowResponseValidationError) ErrorName() string {
	return "WatchLocalNowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchLocalNowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchLocalNowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchLocalNowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchLocalNowResponseValidationError{}
