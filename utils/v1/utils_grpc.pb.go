// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gommerce/utils/v1/utils.proto

package utils_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SequenceService_NextValue_FullMethodName = "/gommerce.utils.v1.SequenceService/NextValue"
)

// SequenceServiceClient is the client API for SequenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequenceServiceClient interface {
	NextValue(ctx context.Context, in *NextValueRequest, opts ...grpc.CallOption) (*NextValueResponse, error)
}

type sequenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequenceServiceClient(cc grpc.ClientConnInterface) SequenceServiceClient {
	return &sequenceServiceClient{cc}
}

func (c *sequenceServiceClient) NextValue(ctx context.Context, in *NextValueRequest, opts ...grpc.CallOption) (*NextValueResponse, error) {
	out := new(NextValueResponse)
	err := c.cc.Invoke(ctx, SequenceService_NextValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceServiceServer is the server API for SequenceService service.
// All implementations must embed UnimplementedSequenceServiceServer
// for forward compatibility
type SequenceServiceServer interface {
	NextValue(context.Context, *NextValueRequest) (*NextValueResponse, error)
	mustEmbedUnimplementedSequenceServiceServer()
}

// UnimplementedSequenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSequenceServiceServer struct {
}

func (UnimplementedSequenceServiceServer) NextValue(context.Context, *NextValueRequest) (*NextValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextValue not implemented")
}
func (UnimplementedSequenceServiceServer) mustEmbedUnimplementedSequenceServiceServer() {}

// UnsafeSequenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequenceServiceServer will
// result in compilation errors.
type UnsafeSequenceServiceServer interface {
	mustEmbedUnimplementedSequenceServiceServer()
}

func RegisterSequenceServiceServer(s grpc.ServiceRegistrar, srv SequenceServiceServer) {
	s.RegisterService(&SequenceService_ServiceDesc, srv)
}

func _SequenceService_NextValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).NextValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequenceService_NextValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).NextValue(ctx, req.(*NextValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequenceService_ServiceDesc is the grpc.ServiceDesc for SequenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gommerce.utils.v1.SequenceService",
	HandlerType: (*SequenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextValue",
			Handler:    _SequenceService_NextValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gommerce/utils/v1/utils.proto",
}

const (
	SnowflakeService_NextHex_FullMethodName   = "/gommerce.utils.v1.SnowflakeService/NextHex"
	SnowflakeService_NextInt64_FullMethodName = "/gommerce.utils.v1.SnowflakeService/NextInt64"
)

// SnowflakeServiceClient is the client API for SnowflakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowflakeServiceClient interface {
	NextHex(ctx context.Context, in *NextHexRequest, opts ...grpc.CallOption) (*NextHexResponse, error)
	NextInt64(ctx context.Context, in *NextInt64Request, opts ...grpc.CallOption) (*NextInt64Response, error)
}

type snowflakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakeServiceClient(cc grpc.ClientConnInterface) SnowflakeServiceClient {
	return &snowflakeServiceClient{cc}
}

func (c *snowflakeServiceClient) NextHex(ctx context.Context, in *NextHexRequest, opts ...grpc.CallOption) (*NextHexResponse, error) {
	out := new(NextHexResponse)
	err := c.cc.Invoke(ctx, SnowflakeService_NextHex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeServiceClient) NextInt64(ctx context.Context, in *NextInt64Request, opts ...grpc.CallOption) (*NextInt64Response, error) {
	out := new(NextInt64Response)
	err := c.cc.Invoke(ctx, SnowflakeService_NextInt64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeServiceServer is the server API for SnowflakeService service.
// All implementations must embed UnimplementedSnowflakeServiceServer
// for forward compatibility
type SnowflakeServiceServer interface {
	NextHex(context.Context, *NextHexRequest) (*NextHexResponse, error)
	NextInt64(context.Context, *NextInt64Request) (*NextInt64Response, error)
	mustEmbedUnimplementedSnowflakeServiceServer()
}

// UnimplementedSnowflakeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnowflakeServiceServer struct {
}

func (UnimplementedSnowflakeServiceServer) NextHex(context.Context, *NextHexRequest) (*NextHexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextHex not implemented")
}
func (UnimplementedSnowflakeServiceServer) NextInt64(context.Context, *NextInt64Request) (*NextInt64Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextInt64 not implemented")
}
func (UnimplementedSnowflakeServiceServer) mustEmbedUnimplementedSnowflakeServiceServer() {}

// UnsafeSnowflakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowflakeServiceServer will
// result in compilation errors.
type UnsafeSnowflakeServiceServer interface {
	mustEmbedUnimplementedSnowflakeServiceServer()
}

func RegisterSnowflakeServiceServer(s grpc.ServiceRegistrar, srv SnowflakeServiceServer) {
	s.RegisterService(&SnowflakeService_ServiceDesc, srv)
}

func _SnowflakeService_NextHex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextHexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServiceServer).NextHex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnowflakeService_NextHex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServiceServer).NextHex(ctx, req.(*NextHexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnowflakeService_NextInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextInt64Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServiceServer).NextInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnowflakeService_NextInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServiceServer).NextInt64(ctx, req.(*NextInt64Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SnowflakeService_ServiceDesc is the grpc.ServiceDesc for SnowflakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnowflakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gommerce.utils.v1.SnowflakeService",
	HandlerType: (*SnowflakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextHex",
			Handler:    _SnowflakeService_NextHex_Handler,
		},
		{
			MethodName: "NextInt64",
			Handler:    _SnowflakeService_NextInt64_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gommerce/utils/v1/utils.proto",
}

const (
	PasswordService_GeneratePassword_FullMethodName = "/gommerce.utils.v1.PasswordService/GeneratePassword"
	PasswordService_HashPassword_FullMethodName     = "/gommerce.utils.v1.PasswordService/HashPassword"
	PasswordService_ValidatePassword_FullMethodName = "/gommerce.utils.v1.PasswordService/ValidatePassword"
)

// PasswordServiceClient is the client API for PasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordServiceClient interface {
	GeneratePassword(ctx context.Context, in *GeneratePasswordRequest, opts ...grpc.CallOption) (*GeneratePasswordResponse, error)
	HashPassword(ctx context.Context, in *HashPasswordRequest, opts ...grpc.CallOption) (*HashPasswordResponse, error)
	ValidatePassword(ctx context.Context, in *ValidatePasswordRequest, opts ...grpc.CallOption) (*ValidatePasswordResponse, error)
}

type passwordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordServiceClient(cc grpc.ClientConnInterface) PasswordServiceClient {
	return &passwordServiceClient{cc}
}

func (c *passwordServiceClient) GeneratePassword(ctx context.Context, in *GeneratePasswordRequest, opts ...grpc.CallOption) (*GeneratePasswordResponse, error) {
	out := new(GeneratePasswordResponse)
	err := c.cc.Invoke(ctx, PasswordService_GeneratePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) HashPassword(ctx context.Context, in *HashPasswordRequest, opts ...grpc.CallOption) (*HashPasswordResponse, error) {
	out := new(HashPasswordResponse)
	err := c.cc.Invoke(ctx, PasswordService_HashPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) ValidatePassword(ctx context.Context, in *ValidatePasswordRequest, opts ...grpc.CallOption) (*ValidatePasswordResponse, error) {
	out := new(ValidatePasswordResponse)
	err := c.cc.Invoke(ctx, PasswordService_ValidatePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordServiceServer is the server API for PasswordService service.
// All implementations must embed UnimplementedPasswordServiceServer
// for forward compatibility
type PasswordServiceServer interface {
	GeneratePassword(context.Context, *GeneratePasswordRequest) (*GeneratePasswordResponse, error)
	HashPassword(context.Context, *HashPasswordRequest) (*HashPasswordResponse, error)
	ValidatePassword(context.Context, *ValidatePasswordRequest) (*ValidatePasswordResponse, error)
	mustEmbedUnimplementedPasswordServiceServer()
}

// UnimplementedPasswordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordServiceServer struct {
}

func (UnimplementedPasswordServiceServer) GeneratePassword(context.Context, *GeneratePasswordRequest) (*GeneratePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePassword not implemented")
}
func (UnimplementedPasswordServiceServer) HashPassword(context.Context, *HashPasswordRequest) (*HashPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashPassword not implemented")
}
func (UnimplementedPasswordServiceServer) ValidatePassword(context.Context, *ValidatePasswordRequest) (*ValidatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePassword not implemented")
}
func (UnimplementedPasswordServiceServer) mustEmbedUnimplementedPasswordServiceServer() {}

// UnsafePasswordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordServiceServer will
// result in compilation errors.
type UnsafePasswordServiceServer interface {
	mustEmbedUnimplementedPasswordServiceServer()
}

func RegisterPasswordServiceServer(s grpc.ServiceRegistrar, srv PasswordServiceServer) {
	s.RegisterService(&PasswordService_ServiceDesc, srv)
}

func _PasswordService_GeneratePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).GeneratePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_GeneratePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).GeneratePassword(ctx, req.(*GeneratePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_HashPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).HashPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_HashPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).HashPassword(ctx, req.(*HashPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_ValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).ValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordService_ValidatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).ValidatePassword(ctx, req.(*ValidatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordService_ServiceDesc is the grpc.ServiceDesc for PasswordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gommerce.utils.v1.PasswordService",
	HandlerType: (*PasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePassword",
			Handler:    _PasswordService_GeneratePassword_Handler,
		},
		{
			MethodName: "HashPassword",
			Handler:    _PasswordService_HashPassword_Handler,
		},
		{
			MethodName: "ValidatePassword",
			Handler:    _PasswordService_ValidatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gommerce/utils/v1/utils.proto",
}

const (
	DateTimeService_GetDBNow_FullMethodName      = "/gommerce.utils.v1.DateTimeService/GetDBNow"
	DateTimeService_GetRedisNow_FullMethodName   = "/gommerce.utils.v1.DateTimeService/GetRedisNow"
	DateTimeService_GetUTCNow_FullMethodName     = "/gommerce.utils.v1.DateTimeService/GetUTCNow"
	DateTimeService_GetLocalNow_FullMethodName   = "/gommerce.utils.v1.DateTimeService/GetLocalNow"
	DateTimeService_WatchLocalNow_FullMethodName = "/gommerce.utils.v1.DateTimeService/WatchLocalNow"
)

// DateTimeServiceClient is the client API for DateTimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DateTimeServiceClient interface {
	GetDBNow(ctx context.Context, in *GetDBNowRequest, opts ...grpc.CallOption) (*GetDBNowResponse, error)
	GetRedisNow(ctx context.Context, in *GetRedisNowRequest, opts ...grpc.CallOption) (*GetRedisNowResponse, error)
	GetUTCNow(ctx context.Context, in *GetUTCNowRequest, opts ...grpc.CallOption) (*GetUTCNowResponse, error)
	GetLocalNow(ctx context.Context, in *GetLocalNowRequest, opts ...grpc.CallOption) (*GetLocalNowResponse, error)
	WatchLocalNow(ctx context.Context, in *WatchLocalNowRequest, opts ...grpc.CallOption) (DateTimeService_WatchLocalNowClient, error)
}

type dateTimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDateTimeServiceClient(cc grpc.ClientConnInterface) DateTimeServiceClient {
	return &dateTimeServiceClient{cc}
}

func (c *dateTimeServiceClient) GetDBNow(ctx context.Context, in *GetDBNowRequest, opts ...grpc.CallOption) (*GetDBNowResponse, error) {
	out := new(GetDBNowResponse)
	err := c.cc.Invoke(ctx, DateTimeService_GetDBNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dateTimeServiceClient) GetRedisNow(ctx context.Context, in *GetRedisNowRequest, opts ...grpc.CallOption) (*GetRedisNowResponse, error) {
	out := new(GetRedisNowResponse)
	err := c.cc.Invoke(ctx, DateTimeService_GetRedisNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dateTimeServiceClient) GetUTCNow(ctx context.Context, in *GetUTCNowRequest, opts ...grpc.CallOption) (*GetUTCNowResponse, error) {
	out := new(GetUTCNowResponse)
	err := c.cc.Invoke(ctx, DateTimeService_GetUTCNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dateTimeServiceClient) GetLocalNow(ctx context.Context, in *GetLocalNowRequest, opts ...grpc.CallOption) (*GetLocalNowResponse, error) {
	out := new(GetLocalNowResponse)
	err := c.cc.Invoke(ctx, DateTimeService_GetLocalNow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dateTimeServiceClient) WatchLocalNow(ctx context.Context, in *WatchLocalNowRequest, opts ...grpc.CallOption) (DateTimeService_WatchLocalNowClient, error) {
	stream, err := c.cc.NewStream(ctx, &DateTimeService_ServiceDesc.Streams[0], DateTimeService_WatchLocalNow_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dateTimeServiceWatchLocalNowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DateTimeService_WatchLocalNowClient interface {
	Recv() (*WatchLocalNowResponse, error)
	grpc.ClientStream
}

type dateTimeServiceWatchLocalNowClient struct {
	grpc.ClientStream
}

func (x *dateTimeServiceWatchLocalNowClient) Recv() (*WatchLocalNowResponse, error) {
	m := new(WatchLocalNowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DateTimeServiceServer is the server API for DateTimeService service.
// All implementations must embed UnimplementedDateTimeServiceServer
// for forward compatibility
type DateTimeServiceServer interface {
	GetDBNow(context.Context, *GetDBNowRequest) (*GetDBNowResponse, error)
	GetRedisNow(context.Context, *GetRedisNowRequest) (*GetRedisNowResponse, error)
	GetUTCNow(context.Context, *GetUTCNowRequest) (*GetUTCNowResponse, error)
	GetLocalNow(context.Context, *GetLocalNowRequest) (*GetLocalNowResponse, error)
	WatchLocalNow(*WatchLocalNowRequest, DateTimeService_WatchLocalNowServer) error
	mustEmbedUnimplementedDateTimeServiceServer()
}

// UnimplementedDateTimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDateTimeServiceServer struct {
}

func (UnimplementedDateTimeServiceServer) GetDBNow(context.Context, *GetDBNowRequest) (*GetDBNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBNow not implemented")
}
func (UnimplementedDateTimeServiceServer) GetRedisNow(context.Context, *GetRedisNowRequest) (*GetRedisNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedisNow not implemented")
}
func (UnimplementedDateTimeServiceServer) GetUTCNow(context.Context, *GetUTCNowRequest) (*GetUTCNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUTCNow not implemented")
}
func (UnimplementedDateTimeServiceServer) GetLocalNow(context.Context, *GetLocalNowRequest) (*GetLocalNowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalNow not implemented")
}
func (UnimplementedDateTimeServiceServer) WatchLocalNow(*WatchLocalNowRequest, DateTimeService_WatchLocalNowServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLocalNow not implemented")
}
func (UnimplementedDateTimeServiceServer) mustEmbedUnimplementedDateTimeServiceServer() {}

// UnsafeDateTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DateTimeServiceServer will
// result in compilation errors.
type UnsafeDateTimeServiceServer interface {
	mustEmbedUnimplementedDateTimeServiceServer()
}

func RegisterDateTimeServiceServer(s grpc.ServiceRegistrar, srv DateTimeServiceServer) {
	s.RegisterService(&DateTimeService_ServiceDesc, srv)
}

func _DateTimeService_GetDBNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateTimeServiceServer).GetDBNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DateTimeService_GetDBNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateTimeServiceServer).GetDBNow(ctx, req.(*GetDBNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DateTimeService_GetRedisNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedisNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateTimeServiceServer).GetRedisNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DateTimeService_GetRedisNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateTimeServiceServer).GetRedisNow(ctx, req.(*GetRedisNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DateTimeService_GetUTCNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUTCNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateTimeServiceServer).GetUTCNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DateTimeService_GetUTCNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateTimeServiceServer).GetUTCNow(ctx, req.(*GetUTCNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DateTimeService_GetLocalNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateTimeServiceServer).GetLocalNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DateTimeService_GetLocalNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateTimeServiceServer).GetLocalNow(ctx, req.(*GetLocalNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DateTimeService_WatchLocalNow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchLocalNowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DateTimeServiceServer).WatchLocalNow(m, &dateTimeServiceWatchLocalNowServer{stream})
}

type DateTimeService_WatchLocalNowServer interface {
	Send(*WatchLocalNowResponse) error
	grpc.ServerStream
}

type dateTimeServiceWatchLocalNowServer struct {
	grpc.ServerStream
}

func (x *dateTimeServiceWatchLocalNowServer) Send(m *WatchLocalNowResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DateTimeService_ServiceDesc is the grpc.ServiceDesc for DateTimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DateTimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gommerce.utils.v1.DateTimeService",
	HandlerType: (*DateTimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDBNow",
			Handler:    _DateTimeService_GetDBNow_Handler,
		},
		{
			MethodName: "GetRedisNow",
			Handler:    _DateTimeService_GetRedisNow_Handler,
		},
		{
			MethodName: "GetUTCNow",
			Handler:    _DateTimeService_GetUTCNow_Handler,
		},
		{
			MethodName: "GetLocalNow",
			Handler:    _DateTimeService_GetLocalNow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchLocalNow",
			Handler:       _DateTimeService_WatchLocalNow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gommerce/utils/v1/utils.proto",
}
